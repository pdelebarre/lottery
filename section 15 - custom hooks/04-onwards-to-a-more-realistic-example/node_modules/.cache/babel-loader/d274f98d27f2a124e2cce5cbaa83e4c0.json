{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Volumes/LaCie/Dev/udemy/react/section 15 - custom hooks/04-onwards-to-a-more-realistic-example/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMS,WAAW,GAAGR,WAAW,CAAC,YAAY;AACxCK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1BR,aAAa,CAACS,GADY,EACP;AACfC,QAAAA,MAAM,EAAEV,aAAa,CAACU,MAAd,GAAqBV,aAAa,CAACU,MAAnC,GAA0C,KADnC;AAEfC,QAAAA,OAAO,EAACX,aAAa,CAACW,OAAd,GAAsBX,aAAa,CAACW,OAApC,GAA4C,EAFrC;AAGfC,QAAAA,IAAI,EAACZ,aAAa,CAACY,IAAd,GAAmBC,IAAI,CAACC,SAAL,CAAed,aAAa,CAACY,IAA7B,CAAnB,GAAsD;AAH5C,OADO,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AAEAjB,MAAAA,SAAS,CAACgB,IAAD,CAAT;AAED,KAjBD,CAiBE,OAAOE,GAAP,EAAY;AACZd,MAAAA,QAAQ,CAACc,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDjB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAxB4B,EAwB3B,EAxB2B,CAA/B;AA0BE,SAAO;AACHD,IAAAA,SAAS,EAACA,SADP;AAEHE,IAAAA,KAAK,EAACA,KAFH;AAGHE,IAAAA,WAAW,EAACA;AAHT,GAAP;AAML,CApCD;;GAAMP,O;;AAsCN,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n  \n    const sendRequest = useCallback(async () => {\n        setIsLoading(true);\n        setError(null);\n        try {\n          const response = await fetch(\n            requestConfig.url, {\n                method: requestConfig.method?requestConfig.method:'GET',\n                headers:requestConfig.headers?requestConfig.headers:{},\n                body:requestConfig.body?JSON.stringify(requestConfig.body):null\n            }\n          );\n    \n          if (!response.ok) {\n            throw new Error('Request failed!');\n          }\n    \n          const data = await response.json();\n    \n          applyData(data)\n    \n        } catch (err) {\n          setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n      },[])\n\n      return {\n          isLoading:isLoading,\n          error:error,\n          sendRequest:sendRequest\n      };\n\n}\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}