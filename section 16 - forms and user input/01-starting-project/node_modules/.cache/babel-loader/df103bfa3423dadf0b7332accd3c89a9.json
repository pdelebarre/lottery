{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/udemy/react/section 16 - forms and user input/01-starting-project/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameIsTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameIsTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameIsTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    setEnteredName(\"\");\n    setEnteredNameIsTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"name must not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"AA4gfUX0BTlxDl9EjcdIYIYoJsU=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/udemy/react/section 16 - forms and user input/01-starting-project/src/components/SimpleInput.js"],"names":["useState","useEffect","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameIsTouched","formIsValid","setFormIsValid","enteredNameIsValid","trim","nameInputIsInvalid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","preventDefault","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACM,kBAAD,EAAqBC,uBAArB,IAAgDP,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMU,kBAAkB,GAAGN,WAAW,CAACO,IAAZ,OAAuB,EAAlD;AACA,QAAMC,kBAAkB,GAAG,CAACF,kBAAD,IAAuBJ,kBAAlD;AAGAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGS,kBAAH,EAAuB;AAACD,MAAAA,cAAc,CAAC,IAAD,CAAd;AAAqB,KAA7C,MAAmD;AAACA,MAAAA,cAAc,CAAC,KAAD,CAAd;AAAsB;AAC3E,GAFQ,EAEP,CAACC,kBAAD,CAFO,CAAT;;AAIA,QAAMG,sBAAsB,GAAIC,KAAD,IAAW;AACxCT,IAAAA,cAAc,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAIA,QAAMC,oBAAoB,GAAIH,KAAD,IAAW;AACtCP,IAAAA,uBAAuB,CAAC,IAAD,CAAvB;AAED,GAHD;;AAKA,QAAMW,qBAAqB,GAAIJ,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACK,cAAN;AAEAZ,IAAAA,uBAAuB,CAAC,IAAD,CAAvB;;AAEA,QAAI,CAACG,kBAAL,EAAyB;AACvB;AACD;;AAEDL,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD,GAXD;;AAcA,QAAMa,gBAAgB,GAAGR,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;AAGA,sBACE;AAAM,IAAA,QAAQ,EAAEM,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEE,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAEP,sBAHZ;AAIE,QAAA,MAAM,EAAEI,oBAJV;AAKE,QAAA,KAAK,EAAEb;AALT;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAWGQ,kBAAkB,iBACjB;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAcE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACJ,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA3DD;;GAAMN,W;;KAAAA,W;AA6DN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameIsTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false)\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n\n  useEffect(() => {\n    if(enteredNameIsValid) {setFormIsValid(true)} else {setFormIsValid(false)}\n  },[enteredNameIsValid]);\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameIsTouched(true);\n\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredNameIsTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    setEnteredName(\"\");\n    setEnteredNameIsTouched(false);\n  };\n\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n      </div>\n      {nameInputIsInvalid && (\n        <p className=\"error-text\">name must not be empty</p>\n      )}\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}