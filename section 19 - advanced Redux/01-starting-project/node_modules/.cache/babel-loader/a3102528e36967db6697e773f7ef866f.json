{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from './ui-slice';\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cartData => {\n  return dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data...\"\n    }));\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Volumes/LaCie/Dev/udemy/react/section 19 - advanced Redux/01-starting-project/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cartData","dispatch","showNotification","status","message","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAAQC,SAAR,QAAwB,YAAxB;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,aAAa,EAAE;AAA5B,GAFc;AAG5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAI,CAACO,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACJ,KAAN,CAAYY,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJL;AAKff,UAAAA,IAAI,EAAEQ,OAAO,CAACU;AALC,SAAjB;AAOD,OARD,MAQO;AACHR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,IAAyBT,OAAO,CAACO,KAAjC;AACH;AACF,KAjBO;;AAkBRI,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAC9B,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAGO,YAAY,CAACM,QAAb,KAAwB,CAA3B,EAA8B;AAC1BV,QAAAA,KAAK,CAACJ,KAAN,GAAYI,KAAK,CAACJ,KAAN,CAAYkB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAWA,EAAtC,CAAZ;AACF,OAFF,MAEQ;AACJH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,IAAyBP,YAAY,CAACK,KAAtC;AACH;AACJ;;AA5BO;AAHkB,CAAD,CAA7B;;AAmCA,MAAMM,YAAY,GAAIC,QAAD,IAAc;AACjC,SAAQC,QAAD,IAAa;AAClBA,IAAAA,QAAQ,CACNzB,SAAS,CAAC0B,gBAAV,CAA2B;AACzBC,MAAAA,MAAM,EAAE,SADiB;AAEzBP,MAAAA,KAAK,EAAE,YAFkB;AAGzBQ,MAAAA,OAAO,EAAE;AAHgB,KAA3B,CADM,CAAR;AAOD,GARD;AASD,CAVD;;AAYA,OAAO,MAAMC,WAAW,GAAG5B,SAAS,CAAC6B,OAA9B;AACP,eAAe7B,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nimport {uiActions} from './ui-slice'\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: { items: [], totalQuantity: 0 },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n      } else {\n          existingItem.quantity++;\n          existingItem.totalPrice+=newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n        const id = action.payload;\n        const existingItem = state.items.find(item => item.id === id);\n        state.totalQuantity--;\n        if(existingItem.quantity===1) {\n            state.items=state.items.filter(item => item.id !==id)\n         } else {\n            existingItem.quantity--;\n            existingItem.totalPrice-=existingItem.price;\n        }\n    },\n  },\n});\n\nconst sendCartData = (cartData) => {\n  return (dispatch) =>{\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data...\",\n      })\n    );\n  }\n}\n\nexport const cartActions = cartSlice.actions\nexport default cartSlice\n\n"]},"metadata":{},"sourceType":"module"}